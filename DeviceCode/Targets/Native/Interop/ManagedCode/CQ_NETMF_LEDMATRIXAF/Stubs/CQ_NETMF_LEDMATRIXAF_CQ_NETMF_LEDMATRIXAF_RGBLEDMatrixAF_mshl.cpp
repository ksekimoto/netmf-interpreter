//-----------------------------------------------------------------------------
//
//    ** DO NOT EDIT THIS FILE! **
//    This file was generated by a tool
//    re-running the tool will overwrite this file.
//
//-----------------------------------------------------------------------------


#include "CQ_NETMF_LEDMATRIXAF.h"
#include "CQ_NETMF_LEDMATRIXAF_CQ_NETMF_LEDMATRIXAF_RGBLEDMatrixAF.h"

using namespace CQ::NETMF::LEDMATRIXAF;


HRESULT Library_CQ_NETMF_LEDMATRIXAF_CQ_NETMF_LEDMATRIXAF_RGBLEDMatrixAF::RGBLEDMatrixAF_Initialize___STATIC__VOID__SZARRAY_U4( CLR_RT_StackFrame& stack )
{
    TINYCLR_HEADER(); hr = S_OK;
    {
        CLR_RT_TypedArray_UINT32 param0;
        TINYCLR_CHECK_HRESULT( Interop_Marshal_UINT32_ARRAY( stack, 0, param0 ) );

        RGBLEDMatrixAF::RGBLEDMatrixAF_Initialize( param0, hr );
        TINYCLR_CHECK_HRESULT( hr );
    }
    TINYCLR_NOCLEANUP();
}

HRESULT Library_CQ_NETMF_LEDMATRIXAF_CQ_NETMF_LEDMATRIXAF_RGBLEDMatrixAF::RGBLEDMatrixAF_SelectLine___STATIC__VOID__U1( CLR_RT_StackFrame& stack )
{
    TINYCLR_HEADER(); hr = S_OK;
    {
        UINT8 param0;
        TINYCLR_CHECK_HRESULT( Interop_Marshal_UINT8( stack, 0, param0 ) );

        RGBLEDMatrixAF::RGBLEDMatrixAF_SelectLine( param0, hr );
        TINYCLR_CHECK_HRESULT( hr );
    }
    TINYCLR_NOCLEANUP();
}

HRESULT Library_CQ_NETMF_LEDMATRIXAF_CQ_NETMF_LEDMATRIXAF_RGBLEDMatrixAF::RGBLEDMatrixAF_TurnOn___STATIC__VOID( CLR_RT_StackFrame& stack )
{
    TINYCLR_HEADER(); hr = S_OK;
    {
        RGBLEDMatrixAF::RGBLEDMatrixAF_TurnOn( hr );
        TINYCLR_CHECK_HRESULT( hr );
    }
    TINYCLR_NOCLEANUP();
}

HRESULT Library_CQ_NETMF_LEDMATRIXAF_CQ_NETMF_LEDMATRIXAF_RGBLEDMatrixAF::RGBLEDMatrixAF_TurnOff___STATIC__VOID( CLR_RT_StackFrame& stack )
{
    TINYCLR_HEADER(); hr = S_OK;
    {
        RGBLEDMatrixAF::RGBLEDMatrixAF_TurnOff( hr );
        TINYCLR_CHECK_HRESULT( hr );
    }
    TINYCLR_NOCLEANUP();
}

HRESULT Library_CQ_NETMF_LEDMATRIXAF_CQ_NETMF_LEDMATRIXAF_RGBLEDMatrixAF::RGBLEDMatrixAF_DrawLineColor2___STATIC__VOID__U4__SZARRAY_U1__SZARRAY_U1__U4__SZARRAY_U1__SZARRAY_U1( CLR_RT_StackFrame& stack )
{
    TINYCLR_HEADER(); hr = S_OK;
    {
        UINT32 param0;
        TINYCLR_CHECK_HRESULT( Interop_Marshal_UINT32( stack, 0, param0 ) );

        CLR_RT_TypedArray_UINT8 param1;
        TINYCLR_CHECK_HRESULT( Interop_Marshal_UINT8_ARRAY( stack, 1, param1 ) );

        CLR_RT_TypedArray_UINT8 param2;
        TINYCLR_CHECK_HRESULT( Interop_Marshal_UINT8_ARRAY( stack, 2, param2 ) );

        UINT32 param3;
        TINYCLR_CHECK_HRESULT( Interop_Marshal_UINT32( stack, 3, param3 ) );

        CLR_RT_TypedArray_UINT8 param4;
        TINYCLR_CHECK_HRESULT( Interop_Marshal_UINT8_ARRAY( stack, 4, param4 ) );

        CLR_RT_TypedArray_UINT8 param5;
        TINYCLR_CHECK_HRESULT( Interop_Marshal_UINT8_ARRAY( stack, 5, param5 ) );

        RGBLEDMatrixAF::RGBLEDMatrixAF_DrawLineColor2( param0, param1, param2, param3, param4, param5, hr );
        TINYCLR_CHECK_HRESULT( hr );
    }
    TINYCLR_NOCLEANUP();
}

HRESULT Library_CQ_NETMF_LEDMATRIXAF_CQ_NETMF_LEDMATRIXAF_RGBLEDMatrixAF::RGBLEDMatrixAF_DrawScreenColor2___STATIC__VOID__SZARRAY_U4__U4__SZARRAY_U1__SZARRAY_U1__SZARRAY_U4__U4__SZARRAY_U1__SZARRAY_U1__U4( CLR_RT_StackFrame& stack )
{
    TINYCLR_HEADER(); hr = S_OK;
    {
        CLR_RT_TypedArray_UINT32 param0;
        TINYCLR_CHECK_HRESULT( Interop_Marshal_UINT32_ARRAY( stack, 0, param0 ) );

        UINT32 param1;
        TINYCLR_CHECK_HRESULT( Interop_Marshal_UINT32( stack, 1, param1 ) );

        CLR_RT_TypedArray_UINT8 param2;
        TINYCLR_CHECK_HRESULT( Interop_Marshal_UINT8_ARRAY( stack, 2, param2 ) );

        CLR_RT_TypedArray_UINT8 param3;
        TINYCLR_CHECK_HRESULT( Interop_Marshal_UINT8_ARRAY( stack, 3, param3 ) );

        CLR_RT_TypedArray_UINT32 param4;
        TINYCLR_CHECK_HRESULT( Interop_Marshal_UINT32_ARRAY( stack, 4, param4 ) );

        UINT32 param5;
        TINYCLR_CHECK_HRESULT( Interop_Marshal_UINT32( stack, 5, param5 ) );

        CLR_RT_TypedArray_UINT8 param6;
        TINYCLR_CHECK_HRESULT( Interop_Marshal_UINT8_ARRAY( stack, 6, param6 ) );

        CLR_RT_TypedArray_UINT8 param7;
        TINYCLR_CHECK_HRESULT( Interop_Marshal_UINT8_ARRAY( stack, 7, param7 ) );

        UINT32 param8;
        TINYCLR_CHECK_HRESULT( Interop_Marshal_UINT32( stack, 8, param8 ) );

        RGBLEDMatrixAF::RGBLEDMatrixAF_DrawScreenColor2( param0, param1, param2, param3, param4, param5, param6, param7, param8, hr );
        TINYCLR_CHECK_HRESULT( hr );
    }
    TINYCLR_NOCLEANUP();
}

HRESULT Library_CQ_NETMF_LEDMATRIXAF_CQ_NETMF_LEDMATRIXAF_RGBLEDMatrixAF::RGBLEDMatrixAF_DrawScreenColor2___STATIC__VOID__SZARRAY_U1__U4__SZARRAY_U1__SZARRAY_U1__SZARRAY_U4__U4__SZARRAY_U1__SZARRAY_U1__U4( CLR_RT_StackFrame& stack )
{
    TINYCLR_HEADER(); hr = S_OK;
    {
        CLR_RT_TypedArray_UINT8 param0;
        TINYCLR_CHECK_HRESULT( Interop_Marshal_UINT8_ARRAY( stack, 0, param0 ) );

        UINT32 param1;
        TINYCLR_CHECK_HRESULT( Interop_Marshal_UINT32( stack, 1, param1 ) );

        CLR_RT_TypedArray_UINT8 param2;
        TINYCLR_CHECK_HRESULT( Interop_Marshal_UINT8_ARRAY( stack, 2, param2 ) );

        CLR_RT_TypedArray_UINT8 param3;
        TINYCLR_CHECK_HRESULT( Interop_Marshal_UINT8_ARRAY( stack, 3, param3 ) );

        CLR_RT_TypedArray_UINT32 param4;
        TINYCLR_CHECK_HRESULT( Interop_Marshal_UINT32_ARRAY( stack, 4, param4 ) );

        UINT32 param5;
        TINYCLR_CHECK_HRESULT( Interop_Marshal_UINT32( stack, 5, param5 ) );

        CLR_RT_TypedArray_UINT8 param6;
        TINYCLR_CHECK_HRESULT( Interop_Marshal_UINT8_ARRAY( stack, 6, param6 ) );

        CLR_RT_TypedArray_UINT8 param7;
        TINYCLR_CHECK_HRESULT( Interop_Marshal_UINT8_ARRAY( stack, 7, param7 ) );

        UINT32 param8;
        TINYCLR_CHECK_HRESULT( Interop_Marshal_UINT32( stack, 8, param8 ) );

        RGBLEDMatrixAF::RGBLEDMatrixAF_DrawScreenColor2( param0, param1, param2, param3, param4, param5, param6, param7, param8, hr );
        TINYCLR_CHECK_HRESULT( hr );
    }
    TINYCLR_NOCLEANUP();
}

HRESULT Library_CQ_NETMF_LEDMATRIXAF_CQ_NETMF_LEDMATRIXAF_RGBLEDMatrixAF::RGBLEDMatrixAF_DrawScreenColor64___STATIC__VOID__SZARRAY_U1__U4__SZARRAY_U1__U4__U4( CLR_RT_StackFrame& stack )
{
    TINYCLR_HEADER(); hr = S_OK;
    {
        CLR_RT_TypedArray_UINT8 param0;
        TINYCLR_CHECK_HRESULT( Interop_Marshal_UINT8_ARRAY( stack, 0, param0 ) );

        UINT32 param1;
        TINYCLR_CHECK_HRESULT( Interop_Marshal_UINT32( stack, 1, param1 ) );

        CLR_RT_TypedArray_UINT8 param2;
        TINYCLR_CHECK_HRESULT( Interop_Marshal_UINT8_ARRAY( stack, 2, param2 ) );

        UINT32 param3;
        TINYCLR_CHECK_HRESULT( Interop_Marshal_UINT32( stack, 3, param3 ) );

        UINT32 param4;
        TINYCLR_CHECK_HRESULT( Interop_Marshal_UINT32( stack, 4, param4 ) );

        RGBLEDMatrixAF::RGBLEDMatrixAF_DrawScreenColor64( param0, param1, param2, param3, param4, hr );
        TINYCLR_CHECK_HRESULT( hr );
    }
    TINYCLR_NOCLEANUP();
}

HRESULT Library_CQ_NETMF_LEDMATRIXAF_CQ_NETMF_LEDMATRIXAF_RGBLEDMatrixAF::RGBLEDMatrixAF_GetFontBitmap___STATIC__VOID__U2__SZARRAY_U1( CLR_RT_StackFrame& stack )
{
    TINYCLR_HEADER(); hr = S_OK;
    {
        UINT16 param0;
        TINYCLR_CHECK_HRESULT( Interop_Marshal_UINT16( stack, 0, param0 ) );

        CLR_RT_TypedArray_UINT8 param1;
        TINYCLR_CHECK_HRESULT( Interop_Marshal_UINT8_ARRAY( stack, 1, param1 ) );

        RGBLEDMatrixAF::RGBLEDMatrixAF_GetFontBitmap( param0, param1, hr );
        TINYCLR_CHECK_HRESULT( hr );
    }
    TINYCLR_NOCLEANUP();
}

HRESULT Library_CQ_NETMF_LEDMATRIXAF_CQ_NETMF_LEDMATRIXAF_RGBLEDMatrixAF::RGBLEDMatrixAF_SetFontsToBuf___STATIC__VOID__SZARRAY_U2__SZARRAY_U1( CLR_RT_StackFrame& stack )
{
    TINYCLR_HEADER(); hr = S_OK;
    {
        CLR_RT_TypedArray_UINT16 param0;
        TINYCLR_CHECK_HRESULT( Interop_Marshal_UINT16_ARRAY( stack, 0, param0 ) );

        CLR_RT_TypedArray_UINT8 param1;
        TINYCLR_CHECK_HRESULT( Interop_Marshal_UINT8_ARRAY( stack, 1, param1 ) );

        RGBLEDMatrixAF::RGBLEDMatrixAF_SetFontsToBuf( param0, param1, hr );
        TINYCLR_CHECK_HRESULT( hr );
    }
    TINYCLR_NOCLEANUP();
}

HRESULT Library_CQ_NETMF_LEDMATRIXAF_CQ_NETMF_LEDMATRIXAF_RGBLEDMatrixAF::RGBLEDMatrixAF_SetFontsToBuf___STATIC__VOID__SZARRAY_U2__SZARRAY_U4( CLR_RT_StackFrame& stack )
{
    TINYCLR_HEADER(); hr = S_OK;
    {
        CLR_RT_TypedArray_UINT16 param0;
        TINYCLR_CHECK_HRESULT( Interop_Marshal_UINT16_ARRAY( stack, 0, param0 ) );

        CLR_RT_TypedArray_UINT32 param1;
        TINYCLR_CHECK_HRESULT( Interop_Marshal_UINT32_ARRAY( stack, 1, param1 ) );

        RGBLEDMatrixAF::RGBLEDMatrixAF_SetFontsToBuf( param0, param1, hr );
        TINYCLR_CHECK_HRESULT( hr );
    }
    TINYCLR_NOCLEANUP();
}

HRESULT Library_CQ_NETMF_LEDMATRIXAF_CQ_NETMF_LEDMATRIXAF_RGBLEDMatrixAF::RGBLEDMatrixAF_RotateXBufColor2___STATIC__VOID__SZARRAY_U4__I4( CLR_RT_StackFrame& stack )
{
    TINYCLR_HEADER(); hr = S_OK;
    {
        CLR_RT_TypedArray_UINT32 param0;
        TINYCLR_CHECK_HRESULT( Interop_Marshal_UINT32_ARRAY( stack, 0, param0 ) );

        INT32 param1;
        TINYCLR_CHECK_HRESULT( Interop_Marshal_INT32( stack, 1, param1 ) );

        RGBLEDMatrixAF::RGBLEDMatrixAF_RotateXBufColor2( param0, param1, hr );
        TINYCLR_CHECK_HRESULT( hr );
    }
    TINYCLR_NOCLEANUP();
}

HRESULT Library_CQ_NETMF_LEDMATRIXAF_CQ_NETMF_LEDMATRIXAF_RGBLEDMatrixAF::RGBLEDMatrixAF_Pset___STATIC__VOID__SZARRAY_U1__I4__I4__U1__U1( CLR_RT_StackFrame& stack )
{
    TINYCLR_HEADER(); hr = S_OK;
    {
        CLR_RT_TypedArray_UINT8 param0;
        TINYCLR_CHECK_HRESULT( Interop_Marshal_UINT8_ARRAY( stack, 0, param0 ) );

        INT32 param1;
        TINYCLR_CHECK_HRESULT( Interop_Marshal_INT32( stack, 1, param1 ) );

        INT32 param2;
        TINYCLR_CHECK_HRESULT( Interop_Marshal_INT32( stack, 2, param2 ) );

        UINT8 param3;
        TINYCLR_CHECK_HRESULT( Interop_Marshal_UINT8( stack, 3, param3 ) );

        UINT8 param4;
        TINYCLR_CHECK_HRESULT( Interop_Marshal_UINT8( stack, 4, param4 ) );

        RGBLEDMatrixAF::RGBLEDMatrixAF_Pset( param0, param1, param2, param3, param4, hr );
        TINYCLR_CHECK_HRESULT( hr );
    }
    TINYCLR_NOCLEANUP();
}

HRESULT Library_CQ_NETMF_LEDMATRIXAF_CQ_NETMF_LEDMATRIXAF_RGBLEDMatrixAF::RGBLEDMatrixAF_Line___STATIC__VOID__SZARRAY_U1__I4__I4__I4__I4__U1__U1( CLR_RT_StackFrame& stack )
{
    TINYCLR_HEADER(); hr = S_OK;
    {
        CLR_RT_TypedArray_UINT8 param0;
        TINYCLR_CHECK_HRESULT( Interop_Marshal_UINT8_ARRAY( stack, 0, param0 ) );

        INT32 param1;
        TINYCLR_CHECK_HRESULT( Interop_Marshal_INT32( stack, 1, param1 ) );

        INT32 param2;
        TINYCLR_CHECK_HRESULT( Interop_Marshal_INT32( stack, 2, param2 ) );

        INT32 param3;
        TINYCLR_CHECK_HRESULT( Interop_Marshal_INT32( stack, 3, param3 ) );

        INT32 param4;
        TINYCLR_CHECK_HRESULT( Interop_Marshal_INT32( stack, 4, param4 ) );

        UINT8 param5;
        TINYCLR_CHECK_HRESULT( Interop_Marshal_UINT8( stack, 5, param5 ) );

        UINT8 param6;
        TINYCLR_CHECK_HRESULT( Interop_Marshal_UINT8( stack, 6, param6 ) );

        RGBLEDMatrixAF::RGBLEDMatrixAF_Line( param0, param1, param2, param3, param4, param5, param6, hr );
        TINYCLR_CHECK_HRESULT( hr );
    }
    TINYCLR_NOCLEANUP();
}

HRESULT Library_CQ_NETMF_LEDMATRIXAF_CQ_NETMF_LEDMATRIXAF_RGBLEDMatrixAF::RGBLEDMatrixAF_Circle___STATIC__VOID__SZARRAY_U1__I4__I4__I4__U1__U1( CLR_RT_StackFrame& stack )
{
    TINYCLR_HEADER(); hr = S_OK;
    {
        CLR_RT_TypedArray_UINT8 param0;
        TINYCLR_CHECK_HRESULT( Interop_Marshal_UINT8_ARRAY( stack, 0, param0 ) );

        INT32 param1;
        TINYCLR_CHECK_HRESULT( Interop_Marshal_INT32( stack, 1, param1 ) );

        INT32 param2;
        TINYCLR_CHECK_HRESULT( Interop_Marshal_INT32( stack, 2, param2 ) );

        INT32 param3;
        TINYCLR_CHECK_HRESULT( Interop_Marshal_INT32( stack, 3, param3 ) );

        UINT8 param4;
        TINYCLR_CHECK_HRESULT( Interop_Marshal_UINT8( stack, 4, param4 ) );

        UINT8 param5;
        TINYCLR_CHECK_HRESULT( Interop_Marshal_UINT8( stack, 5, param5 ) );

        RGBLEDMatrixAF::RGBLEDMatrixAF_Circle( param0, param1, param2, param3, param4, param5, hr );
        TINYCLR_CHECK_HRESULT( hr );
    }
    TINYCLR_NOCLEANUP();
}
